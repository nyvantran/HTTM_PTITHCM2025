from PyQt5.QtCore import QObject, QTimer, QUrl
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
import os
import sys
import numpy as np
import core.config as config
from pathlib import Path


class AlertSoundManager(QObject):
    """Class qu·∫£n l√Ω √¢m thanh c·∫£nh b√°o"""

    def __init__(self):
        super().__init__()
        self.player = None
        self.sound_file = None
        self.is_playing = False
        self.loop_enabled = False

        # T√¨m ho·∫∑c t·∫°o file √¢m thanh
        self._setup_sound_file()

    def _setup_sound_file(self):
        """T√¨m ho·∫∑c t·∫°o file √¢m thanh c·∫£nh b√°o"""
        # T√¨m file √¢m thanh c√≥ s·∫µn
        possible_files = [
            config.config.get("assets")["audio_alert"],
            'sounds/alert.wav',
            'sounds/alert.mp3',

        ]

        for file_path in possible_files:
            if os.path.exists(file_path):
                self.sound_file = os.path.abspath(file_path)
                print(f"‚úÖ S·ª≠ d·ª•ng file √¢m thanh: {self.sound_file}")
                return

        # N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o file beep ƒë∆°n gi·∫£n
        print("üì¢ Kh√¥ng t√¨m th·∫•y file √¢m thanh, t·∫°o file m·∫∑c ƒë·ªãnh...")
        self.sound_file = self._create_beep_sound()

    def _create_beep_sound(self):
        """T·∫°o file beep ƒë∆°n gi·∫£n b·∫±ng numpy v√† scipy"""
        try:
            from scipy.io import wavfile

            # T·∫°o th∆∞ m·ª•c sounds
            Path("sounds").mkdir(exist_ok=True)

            # Tham s·ªë √¢m thanh
            sample_rate = 44100  # Hz
            duration = 0.5  # gi√¢y
            frequency = 1000  # Hz (cao ƒë·ªô)

            # T·∫°o s√≥ng sin
            t = np.linspace(0, duration, int(sample_rate * duration))

            # T·∫°o beep v·ªõi fade in/out
            beep = np.sin(2 * np.pi * frequency * t)

            # Fade in/out ƒë·ªÉ tr√°nh click sound
            fade_samples = int(0.05 * sample_rate)  # 50ms fade
            fade_in = np.linspace(0, 1, fade_samples)
            fade_out = np.linspace(1, 0, fade_samples)

            beep[:fade_samples] *= fade_in
            beep[-fade_samples:] *= fade_out

            # Convert to 16-bit PCM
            beep_int16 = np.int16(beep * 32767)

            # L∆∞u file
            output_file = os.path.abspath("sounds/alert.wav")
            wavfile.write(output_file, sample_rate, beep_int16)

            print(f"‚úÖ ƒê√£ t·∫°o file √¢m thanh: {output_file}")
            return output_file

        except ImportError:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file √¢m thanh (c·∫ßn scipy)")
            print("   C√†i ƒë·∫∑t: pip install scipy")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o file √¢m thanh: {e}")
            return None

    def play_alert(self, loop=True):
        """
        Ph√°t √¢m thanh c·∫£nh b√°o
        Args:
            loop: True = ph√°t l·∫∑p l·∫°i, False = ph√°t 1 l·∫ßn
        """
        if self.is_playing:
            # ƒê√£ ƒëang ph√°t, kh√¥ng c·∫ßn ph√°t l·∫°i
            return

        if not self.sound_file or not os.path.exists(self.sound_file):
            # Fallback to system beep
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file √¢m thanh, d√πng system beep")
            self._play_system_beep()
            return

        try:
            # Kh·ªüi t·∫°o QMediaPlayer n·∫øu ch∆∞a c√≥
            if self.player is None:
                self.player = QMediaPlayer()
                self.player.mediaStatusChanged.connect(self._on_media_status_changed)
                self.player.error.connect(self._on_error)

            # Set media
            url = QUrl.fromLocalFile(self.sound_file)
            content = QMediaContent(url)
            self.player.setMedia(content)

            # Set volume
            self.player.setVolume(70)  # 0-100

            # Enable loop
            self.loop_enabled = loop

            # Play
            self.player.play()
            self.is_playing = True

            print(f"üîä B·∫Øt ƒë·∫ßu ph√°t √¢m thanh c·∫£nh b√°o")

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ph√°t √¢m thanh: {e}")
            import traceback
            traceback.print_exc()
            self._play_system_beep()

    def _on_media_status_changed(self, status):
        """Callback khi tr·∫°ng th√°i media thay ƒë·ªïi"""
        try:
            if status == QMediaPlayer.EndOfMedia:
                if self.loop_enabled and self.is_playing:
                    # Replay khi k·∫øt th√∫c
                    self.player.play()
                else:
                    self.is_playing = False
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói trong _on_media_status_changed: {e}")

    def _on_error(self, error):
        """Callback khi c√≥ l·ªói"""
        if self.player:
            error_string = self.player.errorString()
            print(f"‚ö†Ô∏è Media Player Error: {error} - {error_string}")
            self.is_playing = False

    def stop_alert(self):
        """D·ª´ng √¢m thanh c·∫£nh b√°o"""
        if not self.is_playing:
            return

        try:
            self.loop_enabled = False
            self.is_playing = False

            if self.player:
                self.player.stop()

            print("üîá ƒê√£ d·ª´ng √¢m thanh c·∫£nh b√°o")

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói d·ª´ng √¢m thanh: {e}")

    def _play_system_beep(self):
        """Ph√°t beep c·ªßa h·ªá th·ªëng (fallback)"""
        try:
            if sys.platform == 'win32':
                import winsound
                # Beep 1000Hz, 500ms - ch·ªâ 1 l·∫ßn
                winsound.Beep(1000, 500)
            else:
                # Linux/Mac
                print('\a')  # Bell character
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√°t system beep: {e}")

    def cleanup(self):
        """D·ªçn d·∫πp resources"""
        try:
            self.stop_alert()

            if self.player:
                # Disconnect signals
                try:
                    self.player.mediaStatusChanged.disconnect()
                    self.player.error.disconnect()
                except:
                    pass

                self.player.deleteLater()
                self.player = None

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói cleanup sound manager: {e}")


# Singleton instance
_sound_manager = None


def get_sound_manager():
    """L·∫•y instance singleton c·ªßa SoundManager"""
    global _sound_manager
    if _sound_manager is None:
        _sound_manager = AlertSoundManager()
    return _sound_manager


def cleanup_sound_manager():
    """D·ªçn d·∫πp sound manager"""
    global _sound_manager
    if _sound_manager is not None:
        _sound_manager.cleanup()
        _sound_manager = None
