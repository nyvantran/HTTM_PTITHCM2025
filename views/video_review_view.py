from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QTableWidget, QTableWidgetItem,
                             QHeaderView, QGroupBox, QSlider, QFrame,
                             QComboBox, QTextEdit, QMessageBox)
from PyQt5.QtCore import pyqtSignal, Qt, QTimer
from PyQt5.QtGui import QFont, QColor, QPixmap
import random
from datetime import datetime, timedelta


class VideoReviewView(QWidget):
    """View xem l·∫°i video"""

    back_signal = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.current_user = None
        self.dummy_videos = []
        self.init_ui()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        main_layout = QVBoxLayout()
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)

        # Header
        header_layout = self.create_header()
        main_layout.addLayout(header_layout)

        # Content
        content_layout = QHBoxLayout()
        content_layout.setSpacing(10)

        # B√™n tr√°i: Video player
        video_widget = self.create_video_player()
        content_layout.addWidget(video_widget, 60)

        # B√™n ph·∫£i: Video list
        list_widget = self.create_video_list()
        content_layout.addWidget(list_widget, 40)

        main_layout.addLayout(content_layout, 1)

        self.setLayout(main_layout)

    def create_header(self):
        """T·∫°o header"""
        layout = QHBoxLayout()

        # Title
        title_label = QLabel("üé¨ XEM L·∫†I VIDEO C·∫¢NH B√ÅO")
        title_label.setFont(QFont('Arial', 14, QFont.Bold))
        title_label.setStyleSheet("color: #2c3e50;")

        # Filter
        filter_label = QLabel("L·ªçc:")
        filter_label.setFont(QFont('Arial', 9))

        self.status_filter = QComboBox()
        self.status_filter.addItems(['T·∫•t c·∫£', 'Ch∆∞a x√°c nh·∫≠n', 'ƒê√£ x√°c nh·∫≠n', 'T·ª´ ch·ªëi'])
        self.status_filter.setMinimumWidth(120)
        self.status_filter.setMaximumHeight(30)
        self.status_filter.setStyleSheet("""
            QComboBox {
                border: 2px solid #bdc3c7;
                border-radius: 4px;
                padding: 5px;
                font-size: 9px;
            }
        """)
        self.status_filter.currentIndexChanged.connect(self.filter_videos)

        # Back button
        back_button = QPushButton("‚Üê Quay l·∫°i")
        back_button.setMaximumHeight(30)
        back_button.setMinimumWidth(100)
        back_button.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 15px;
                font-weight: bold;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        back_button.clicked.connect(self.back_signal.emit)

        layout.addWidget(title_label)
        layout.addStretch()
        layout.addWidget(filter_label)
        layout.addWidget(self.status_filter)
        layout.addWidget(back_button)

        return layout

    def create_video_player(self):
        """T·∫°o video player"""
        group = QGroupBox("üìπ Video Player")
        group.setFont(QFont('Arial', 10, QFont.Bold))
        group.setStyleSheet("""
            QGroupBox {
                background-color: white;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 8px;
                padding-top: 12px;
            }
            QGroupBox::title {
                color: #2c3e50;
            }
        """)

        layout = QVBoxLayout()
        layout.setSpacing(8)

        # Video display
        self.video_frame = QLabel()
        self.video_frame.setMinimumSize(480, 360)
        self.video_frame.setMaximumSize(640, 480)
        self.video_frame.setAlignment(Qt.AlignCenter)
        self.video_frame.setStyleSheet("""
            QLabel {
                background-color: #2c3e50;
                border: 2px solid #34495e;
                border-radius: 5px;
                color: white;
                font-size: 12px;
            }
        """)
        self.video_frame.setText("üìπ\n\nCh·ªçn video t·ª´ danh s√°ch")

        # Video info
        info_layout = QHBoxLayout()

        self.video_title_label = QLabel("Ch∆∞a ch·ªçn video")
        self.video_title_label.setFont(QFont('Arial', 9, QFont.Bold))

        self.video_time_label = QLabel("00:00 / 00:00")
        self.video_time_label.setFont(QFont('Arial', 8))
        self.video_time_label.setStyleSheet("color: #7f8c8d;")

        info_layout.addWidget(self.video_title_label)
        info_layout.addStretch()
        info_layout.addWidget(self.video_time_label)

        # Progress slider
        self.progress_slider = QSlider(Qt.Horizontal)
        self.progress_slider.setRange(0, 100)
        self.progress_slider.setValue(0)
        self.progress_slider.setMaximumHeight(20)

        # Controls
        controls_layout = QHBoxLayout()

        self.play_button = QPushButton("‚ñ∂Ô∏è Ph√°t")
        self.play_button.setMaximumHeight(30)
        self.play_button.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 15px;
                font-weight: bold;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #229954;
            }
        """)

        speed_label = QLabel("T·ªëc ƒë·ªô:")
        speed_label.setFont(QFont('Arial', 8))

        self.speed_combo = QComboBox()
        self.speed_combo.addItems(['0.5x', '1x', '1.5x', '2x'])
        self.speed_combo.setCurrentText('1x')
        self.speed_combo.setMaximumWidth(60)
        self.speed_combo.setMaximumHeight(25)

        controls_layout.addWidget(self.play_button)
        controls_layout.addStretch()
        controls_layout.addWidget(speed_label)
        controls_layout.addWidget(self.speed_combo)

        # Review section
        review_group = QFrame()
        review_group.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 2px solid #e9ecef;
                border-radius: 5px;
                padding: 8px;
            }
        """)
        review_layout = QVBoxLayout(review_group)
        review_layout.setSpacing(5)

        review_title = QLabel("‚úçÔ∏è X√°c nh·∫≠n th·ªß c√¥ng")
        review_title.setFont(QFont('Arial', 9, QFont.Bold))

        # Status
        status_layout = QHBoxLayout()
        status_layout.addWidget(QLabel("Tr·∫°ng th√°i:"))

        self.review_status = QComboBox()
        self.review_status.addItems(['Ch∆∞a x√°c nh·∫≠n', 'X√°c nh·∫≠n bu·ªìn ng·ªß',
                                     'T·ª´ ch·ªëi - T·ªânh t√°o', 'False Positive'])
        self.review_status.setMinimumWidth(150)
        self.review_status.setMaximumHeight(25)

        status_layout.addWidget(self.review_status)
        status_layout.addStretch()

        # Notes
        notes_label = QLabel("Ghi ch√∫:")
        notes_label.setFont(QFont('Arial', 8))

        self.notes_text = QTextEdit()
        self.notes_text.setMaximumHeight(50)
        self.notes_text.setPlaceholderText("Nh·∫≠p ghi ch√∫...")
        self.notes_text.setStyleSheet("""
            QTextEdit {
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                padding: 5px;
                font-size: 8px;
            }
        """)

        # Save button
        save_button = QPushButton("üíæ L∆∞u x√°c nh·∫≠n")
        save_button.setMaximumHeight(30)
        save_button.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 5px 15px;
                font-weight: bold;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        save_button.clicked.connect(self.save_review)

        review_layout.addWidget(review_title)
        review_layout.addLayout(status_layout)
        review_layout.addWidget(notes_label)
        review_layout.addWidget(self.notes_text)
        review_layout.addWidget(save_button)

        # Add to main layout
        layout.addWidget(self.video_frame)
        layout.addLayout(info_layout)
        layout.addWidget(self.progress_slider)
        layout.addLayout(controls_layout)
        layout.addWidget(review_group)

        group.setLayout(layout)
        return group

    def create_video_list(self):
        """T·∫°o danh s√°ch video"""
        group = QGroupBox("üìã Danh s√°ch video")
        group.setFont(QFont('Arial', 10, QFont.Bold))
        group.setStyleSheet("""
            QGroupBox {
                background-color: white;
                border: 2px solid #bdc3c7;
                border-radius: 5px;
                margin-top: 8px;
                padding-top: 12px;
            }
            QGroupBox::title {
                color: #2c3e50;
            }
        """)

        layout = QVBoxLayout()

        # Table
        self.video_table = QTableWidget()
        self.video_table.setColumnCount(4)
        self.video_table.setHorizontalHeaderLabels(['Th·ªùi gian', 'ƒê·ªô d√†i', 'Conf%', 'Tr·∫°ng th√°i'])

        self.video_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border: 1px solid #bdc3c7;
                gridline-color: #ecf0f1;
                font-size: 8px;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget::item:selected {
                background-color: #3498db;
                color: white;
            }
            QHeaderView::section {
                background-color: #34495e;
                color: white;
                padding: 5px;
                border: none;
                font-weight: bold;
                font-size: 8px;
            }
        """)

        self.video_table.verticalHeader().setDefaultSectionSize(28)
        self.video_table.verticalHeader().setVisible(False)
        self.video_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.video_table.setSelectionMode(QTableWidget.SingleSelection)

        header = self.video_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)

        self.video_table.itemSelectionChanged.connect(self.on_video_selected)

        # Stats
        self.stats_label = QLabel("T·ªïng: 0 video")
        self.stats_label.setFont(QFont('Arial', 8))
        self.stats_label.setStyleSheet("color: #7f8c8d;")

        layout.addWidget(self.video_table)
        layout.addWidget(self.stats_label)

        group.setLayout(layout)
        return group

    def load_dummy_videos(self):
        """T·∫£i danh s√°ch video gi·∫£ l·∫≠p"""
        try:
            self.video_table.setRowCount(0)
            self.dummy_videos = []

            statuses = ['Ch∆∞a x√°c nh·∫≠n', 'X√°c nh·∫≠n bu·ªìn ng·ªß', 'T·ª´ ch·ªëi - T·ªânh t√°o']

            for i in range(25):
                time_ago = datetime.now() - timedelta(hours=random.randint(1, 240))
                duration = random.randint(5, 30)
                confidence = random.uniform(0.65, 0.98)
                status = random.choice(statuses)

                video_data = {
                    'id': i,
                    'timestamp': time_ago,
                    'duration': duration,
                    'confidence': confidence,
                    'status': status
                }
                self.dummy_videos.append(video_data)
                self.add_video_to_table(video_data)

            self.stats_label.setText(f"T·ªïng: {len(self.dummy_videos)} video")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói load videos: {e}")

    def add_video_to_table(self, video_data):
        """Th√™m video v√†o b·∫£ng"""
        try:
            row = self.video_table.rowCount()
            self.video_table.insertRow(row)

            # Time
            time_str = video_data['timestamp'].strftime('%d/%m %H:%M')
            time_item = QTableWidgetItem(time_str)
            time_item.setFont(QFont('Arial', 8))
            self.video_table.setItem(row, 0, time_item)

            # Duration
            duration_item = QTableWidgetItem(f"{video_data['duration']}s")
            duration_item.setFont(QFont('Arial', 8))
            duration_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 1, duration_item)

            # Confidence
            conf_item = QTableWidgetItem(f"{video_data['confidence'] * 100:.0f}")
            conf_item.setFont(QFont('Arial', 8, QFont.Bold))
            if video_data['confidence'] > 0.85:
                conf_item.setForeground(QColor("#e74c3c"))
            elif video_data['confidence'] > 0.75:
                conf_item.setForeground(QColor("#e67e22"))
            else:
                conf_item.setForeground(QColor("#f39c12"))
            conf_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 2, conf_item)

            # Status
            status_short = video_data['status'].split('-')[0].strip()
            status_item = QTableWidgetItem(status_short)
            status_item.setFont(QFont('Arial', 8))
            if 'Ch∆∞a' in video_data['status']:
                status_item.setForeground(QColor("#95a5a6"))
            elif 'X√°c nh·∫≠n' in video_data['status']:
                status_item.setForeground(QColor("#e74c3c"))
            else:
                status_item.setForeground(QColor("#27ae60"))
            status_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 3, status_item)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói add video to table: {e}")

    def on_video_selected(self):
        """Khi ch·ªçn video"""
        try:
            selected_rows = self.video_table.selectedItems()
            if not selected_rows:
                return

            row = selected_rows[0].row()
            if row < len(self.dummy_videos):
                video_data = self.dummy_videos[row]

                self.video_title_label.setText(
                    f"Video #{video_data['id']} - {video_data['timestamp'].strftime('%d/%m/%Y %H:%M')}")
                self.video_time_label.setText(f"00:00 / 00:{video_data['duration']:02d}")

                self.video_frame.setText(
                    f"üé¨\n\nVideo #{video_data['id']}\n"
                    f"{video_data['timestamp'].strftime('%d/%m/%Y %H:%M')}\n\n"
                    f"Confidence: {video_data['confidence'] * 100:.1f}%"
                )

                if 'Ch∆∞a' in video_data['status']:
                    self.review_status.setCurrentIndex(0)
                elif 'X√°c nh·∫≠n' in video_data['status']:
                    self.review_status.setCurrentIndex(1)
                else:
                    self.review_status.setCurrentIndex(2)

                self.notes_text.clear()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói select video: {e}")

    def save_review(self):
        """L∆∞u x√°c nh·∫≠n"""
        try:
            selected_rows = self.video_table.selectedItems()
            if not selected_rows:
                QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn video!")
                return

            status = self.review_status.currentText()

            row = selected_rows[0].row()
            status_item = self.video_table.item(row, 3)
            status_short = status.split('-')[0].strip()
            status_item.setText(status_short)

            if 'Ch∆∞a' in status:
                status_item.setForeground(QColor("#95a5a6"))
            elif 'X√°c nh·∫≠n' in status:
                status_item.setForeground(QColor("#e74c3c"))
            else:
                status_item.setForeground(QColor("#27ae60"))

            QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ l∆∞u!\n\n{status}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói save review: {e}")
            QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ l∆∞u:\n{str(e)}")

    def filter_videos(self):
        """L·ªçc video"""
        try:
            filter_text = self.status_filter.currentText()

            for row in range(self.video_table.rowCount()):
                status_item = self.video_table.item(row, 3)
                if status_item:
                    if filter_text == 'T·∫•t c·∫£':
                        self.video_table.setRowHidden(row, False)
                    else:
                        should_hide = filter_text.split()[0] not in status_item.text()
                        self.video_table.setRowHidden(row, should_hide)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói filter: {e}")

    def set_user_info(self, user_info):
        """Set user v√† load data"""
        try:
            self.current_user = user_info
            self.load_dummy_videos()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói set user: {e}")
